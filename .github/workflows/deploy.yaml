name: Deploy MultiK8s
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgresdb: # This is the service name, but it's not used as a hostname
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.DB_USER_TEST }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PW_TEST }}
          POSTGRES_DB: ${{ secrets.DB_TEST }}
        ports:
          - 5432:5432  # Expose PostgreSQL on localhost:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch environment variables for testing
        run: |
          echo "PG_USER=${{ secrets.DB_USER_TEST }}" >> ./server/.env
          echo "PG_HOST=${{ secrets.DB_HOST_TEST }}" >> ./server/.env
          echo "PG_PORT=${{ secrets.DB_PORT_TEST }}" >> ./server/.env
          echo "PG_DATABASE=${{ secrets.DB_TEST }}" >> ./server/.env
          echo "PG_PASSWORD=${{ secrets.DB_PW_TEST }}" >> ./server/.env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST_TEST }}" >> ./server/.env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT_TEST }}" >> ./server/.env

      - name: Build for testing
        run: docker build --cache-from webapp/fastapi-app -t webapp/fastapi-app -f ./server/Dockerfile ./server

      - name: Run tests
        run: docker run -e CI=true webapp/fastapi-app:latest pytest

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GKE_SA_KEY }}"

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: multi-k8s-450306

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker --quiet

      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: multi-cluster
          location: us-central1-a

      - name: Fetch Kubernetes Secrets to .env file
        run: |
          SECRET_NAME=env
          kubectl get secret $SECRET_NAME -o json | jq -r '.data | to_entries | .[] | "\(.key)=\(.value | @base64d)"' > ./server/.env

      - name: Build multi-image for deployment
        run: | 
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/multi-client:latest -t ${{ secrets.DOCKER_HUB_USERNAME }}/multi-client:${{ github.sha }} -f ./client/Dockerfile ./client
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/multi-server:latest -t ${{ secrets.DOCKER_HUB_USERNAME }}/multi-server:${{ github.sha }} -f ./server/Dockerfile ./server
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/multi-worker:latest -t ${{ secrets.DOCKER_HUB_USERNAME }}/multi-worker:${{ github.sha }} -f ./worker/Dockerfile./worker

      - name: Docker push image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/multi-client:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/multi-client:${{ github.sha }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/multi-nginx:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/multi-nginx:${{ github.sha }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/multi-server:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/multi-server:${{ github.sha }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/multi-worker:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/multi-worker:${{ github.sha }}

      - name: Deploy to Kubernetes
        run: kubectl apply -f k8s

      - name: Update Kubernetes Deployments
        run: |
          kubectl set image deployments/server-deployment server=${{ secrets.DOCKER_HUB_USERNAME }}/multi-server:${{ env.SHA }}
          kubectl set image deployments/client-deployment client=${{ secrets.DOCKER_HUB_USERNAME }}/multi-client:${{ env.SHA }}
          kubectl set image deployments/worker-deployment worker=${{ secrets.DOCKER_HUB_USERNAME }}/multi-worker:${{ env.SHA }}
